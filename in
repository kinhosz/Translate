Operandos Constantes ou Imediatos.
 Muitas vezes, um programa usará uma
constante em uma operação - por exemplo, incrementando um índice para
apontar para o próximo elemento de uma matriz. De fato, mais da metade
das instruções aritméticas RISC-V tem uma constante como operando ao
executar os benchmarks SPEC CPU2006.
 Usando apenas as instruções que vimos até agora, teríamos que carregar
uma constante da memória para usar uma. (As constantes teriam sido colocadas
na memória quando o programa foi carregado.) Por exemplo, para adicionar
a constante 4 para registrar x22, poderíamos usar o código
 ld
 x9, AddrConstant4 (x3)
 adicionar x22, x22, x9
 // x9 = constante 4
 // x22 = x22 + x9 (onde x9 == 4) assumindo que x3 + AddrConstant4 é
o endereço de memória da constante 4.
 Uma alternativa que evita a instrução load é oferecer versões das
instruções aritméticas em que um operando é uma constante.
Esta instrução de adição rápida com um operando constante é chamada
add imediata ou addi. Para adicionar 4 para registrar x22, apenas escrevemos
addi
 x22, x22, 4
 // x22 = x22 + 4
 Operandos constantes ocorrem com freqüência; de fato, addi é a instrução
mais popular na maioria dos programas RISC-V. Ao incluir constantes dentro
de instruções aritméticas, as operações são muito mais rápidas
e usam menos energia do que se as constantes fossem carregadas da memória.
A constante zero tem outra função, que é simplificar o conjunto de
instruções, oferecendo variações úteis. Por exemplo, você pode negar
o valor em um registro usando a instrução sub com zero para o primeiro
operando. Portanto, o RISC-V dedica o registrador x0 a ser conectado ao
valor zero. Usar a frequência para justificar as inclusões de constantes
é outro exemplo da grande idéia do Capítulo 1 de tornar o caso comum
rápido.
